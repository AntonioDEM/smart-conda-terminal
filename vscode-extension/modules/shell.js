const fs = require('fs');
const path = require('path');
const os = require('os');
const vscode = require('vscode');
const { appendStructureLog, logError, logInfo } = require('../logging');

async function configureShellAutoActivation(workspaceFolder, condaEnv) {
  try {
    const homeDir = os.homedir();
    const projectName = path.basename(workspaceFolder);
    const functionName = projectName.replace(/[^a-zA-Z0-9_]/g, '_');
    const isWindows = process.platform === 'win32';

    let shellConfig = '';
    let shellType = '';

    if (isWindows) {
      const psProfile = path.join(homeDir, 'Documents', 'PowerShell', 'Microsoft.PowerShell_profile.ps1');
      const ps5Profile = path.join(homeDir, 'Documents', 'WindowsPowerShell', 'Microsoft.PowerShell_profile.ps1');

      if (fs.existsSync(psProfile)) {
        shellConfig = psProfile;
        shellType = 'powershell';
      } else if (fs.existsSync(ps5Profile)) {
        shellConfig = ps5Profile;
        shellType = 'powershell5';
      } else {
        const psDir = path.dirname(psProfile);
        if (!fs.existsSync(psDir)) {
          fs.mkdirSync(psDir, { recursive: true });
        }
        shellConfig = psProfile;
        shellType = 'powershell';
        try { fs.writeFileSync(shellConfig, '# PowerShell Profile\n'); } catch (_) {}
      }
    } else {
      const currentShell = process.env.SHELL || '';
      if (currentShell.includes('zsh')) {
        shellConfig = path.join(homeDir, '.zshrc');
        shellType = 'zsh';
      } else if (currentShell.includes('bash')) {
        shellConfig = path.join(homeDir, '.bash_profile');
        if (!fs.existsSync(shellConfig)) {
          shellConfig = path.join(homeDir, '.bashrc');
        }
        shellType = 'bash';
      } else {
        const zrc = path.join(homeDir, '.zshrc');
        const brc = path.join(homeDir, '.bashrc');
        if (fs.existsSync(zrc)) {
          shellConfig = zrc;
          shellType = 'zsh';
        } else {
          shellConfig = brc;
          shellType = 'bash';
          if (!fs.existsSync(shellConfig)) {
            try { fs.writeFileSync(shellConfig, '# ~/.bashrc\n'); } catch (_) {}
          }
        }
        logInfo(`Shell non riconosciuta ('${currentShell}'): fallback su ${shellType}.`);
      }
    }

    if (!fs.existsSync(shellConfig)) {
      console.log('Shell config file not found:', shellConfig);
      return false;
    }

    const shellContent = fs.readFileSync(shellConfig, 'utf8');
    const configMarker = `# *${projectName}* - Auto-activation`;
    if (shellContent.includes(configMarker)) {
      console.log('Auto-activation already configured for', projectName);
      return true;
    }

    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
    const backupFile = `${shellConfig}.backup.${timestamp}`;
    fs.writeFileSync(backupFile, shellContent);

    const dateString = new Date().toLocaleString('it-IT', {
      timeZone: 'Europe/Rome',
      weekday: 'short',
      day: '2-digit',
      month: 'short',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    });

    let autoActivationConfig = '';
    if (shellType === 'powershell' || shellType === 'powershell5') {
      const windowsWorkspacePath = workspaceFolder.replace(/\\/g, '\\\\');
      autoActivationConfig = `

# *${projectName}* - Auto-activation
# Generated by Smart Conda Workspace on ${dateString}
function ${functionName} {
    $currentPath = Get-Location
    if ($currentPath.Path -like "*${windowsWorkspacePath}*") {
        try {
            conda activate ${condaEnv.name}
        } catch {
            Write-Host "Failed to activate conda environment: ${condaEnv.name}" -ForegroundColor Yellow
        }
    }
}

# PowerShell integration - auto-activate on directory change
$global:SmartCondaProjects = @()
if (-not ($global:SmartCondaProjects -contains "${functionName}")) {
    $global:SmartCondaProjects += "${functionName}"
}

# Override Set-Location to trigger activation
if (-not (Get-Command "Set-Location-Original" -ErrorAction SilentlyContinue)) {
    Set-Alias -Name "Set-Location-Original" -Value "Set-Location" -Force
    function Set-Location {
        param([string]$Path, [switch]$PassThru)
        Set-Location-Original @PSBoundParameters
        foreach ($func in $global:SmartCondaProjects) {
            & $func
        }
    }
    Set-Alias -Name "cd" -Value "Set-Location" -Force
}

# Activate now
${functionName}
`;
    } else {
      autoActivationConfig = `

# *${projectName}* - Auto-activation
# Generated by Smart Conda Workspace on ${dateString}
${functionName}() {
    if [[ "$PWD" == *"${workspaceFolder}"* ]]; then
        conda activate ${condaEnv.name} 2>/dev/null || true
    fi
}

`;
      if (shellType === 'zsh') {
        autoActivationConfig += `# ZSH integration
if [[ -n "$ZSH_VERSION" ]]; then
    chpwd_functions+=(${functionName})
    ${functionName}  # Activate now
fi
`;
      } else if (shellType === 'bash') {
        autoActivationConfig += `# Bash integration
if [[ -n "$BASH_VERSION" ]]; then
    PROMPT_COMMAND="${functionName};\$PROMPT_COMMAND"
    ${functionName}  # Activate now
fi
`;
      }
    }

    fs.appendFileSync(shellConfig, autoActivationConfig);

    console.log(`Auto-activation configured for ${projectName} -> ${condaEnv.name}`);
    console.log(`Function: ${functionName}`);
    console.log(`Shell config: ${shellConfig}`);
    console.log(`Shell type: ${shellType}`);

    const osLabel = process.platform === 'win32' ? 'Windows' : (process.platform === 'darwin' ? 'macOS' : 'Linux');
    appendStructureLog(
      workspaceFolder,
      `Auto‑attivazione configurata – Env '${condaEnv.name}', OS: ${osLabel}, shell: ${shellType}`
    );

    return true;
  } catch (error) {
    logError(`Failed to configure shell auto-activation: ${error?.message || error}`);
    try { vscode.window.showWarningMessage(`Shell auto-activation failed: ${error.message}`); } catch (_) {}
    return false;
  }
}

module.exports = {
  configureShellAutoActivation,
};